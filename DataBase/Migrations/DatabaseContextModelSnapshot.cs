// <auto-generated />
using System;
using AxisUno.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.ApplicationLog.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Event")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OperationHeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RealTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OperationHeaderId");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DealDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DealLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationHeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SourceDocumentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceDocumentNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TaxDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OperationHeaderId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Exchanges.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Acct")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExchangeType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationHeaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OperationHeaderId");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VatgroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("VatgroupId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.ItemsCodes.ItemsCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Multiplier")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemsCodes");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.ItemsGroups.ItemsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ItemsGroups");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.OperationDetails.OperationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OperationHeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchaseVat")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Qtty")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SaleVat")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sign")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SrcId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.HasIndex("OperationHeaderId");

                    b.ToTable("OperationDetails");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.OperationHeaders.OperationHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Acct")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("EcrreceiptNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EcrreceiptType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OperType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SrcDocId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UserRealTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Usn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SrcDocId");

                    b.ToTable("OperationHeaders");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Partners.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankBic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscountCard")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Vatnumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.PartnersGroups.PartnersGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PartnersGroups");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.PaymentTypes.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Serializations.Serialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Serializations");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Settings.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Stores.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Qtty")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrcId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SrcId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Vatgroups.Vatgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Vatvalue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vatgroups");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.ApplicationLog.ApplicationLog", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.OperationHeaders.OperationHeader", "OperationHeader")
                        .WithMany()
                        .HasForeignKey("OperationHeaderId");

                    b.Navigation("OperationHeader");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Documents.Document", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.OperationHeaders.OperationHeader", "OperationHeader")
                        .WithMany()
                        .HasForeignKey("OperationHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationHeader");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Exchanges.Exchange", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.OperationHeaders.OperationHeader", "OperationHeader")
                        .WithMany()
                        .HasForeignKey("OperationHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationHeader");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Items.Item", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.ItemsGroups.ItemsGroup", "Group")
                        .WithMany("Items")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisUno.DataBase.My100REnteties.Vatgroups.Vatgroup", "Vatgroup")
                        .WithMany()
                        .HasForeignKey("VatgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Vatgroup");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.ItemsCodes.ItemsCode", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.Items.Item", "Item")
                        .WithMany("ItemsCodes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.OperationDetails.OperationDetail", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.Items.Item", "Good")
                        .WithMany()
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisUno.DataBase.My100REnteties.OperationHeaders.OperationHeader", "OperationHeader")
                        .WithMany("OperationDetails")
                        .HasForeignKey("OperationHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("OperationHeader");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.OperationHeaders.OperationHeader", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.Partners.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisUno.DataBase.My100REnteties.PaymentTypes.PaymentType", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisUno.DataBase.My100REnteties.OperationHeaders.OperationHeader", "SrcDoc")
                        .WithMany()
                        .HasForeignKey("SrcDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Payment");

                    b.Navigation("SrcDoc");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Partners.Partner", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.PartnersGroups.PartnersGroup", "Group")
                        .WithMany("Partners")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Stores.Store", b =>
                {
                    b.HasOne("AxisUno.DataBase.My100REnteties.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxisUno.DataBase.My100REnteties.OperationDetails.OperationDetail", "Src")
                        .WithMany()
                        .HasForeignKey("SrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Src");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.Items.Item", b =>
                {
                    b.Navigation("ItemsCodes");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.ItemsGroups.ItemsGroup", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.OperationHeaders.OperationHeader", b =>
                {
                    b.Navigation("OperationDetails");
                });

            modelBuilder.Entity("AxisUno.DataBase.My100REnteties.PartnersGroups.PartnersGroup", b =>
                {
                    b.Navigation("Partners");
                });
#pragma warning restore 612, 618
        }
    }
}
